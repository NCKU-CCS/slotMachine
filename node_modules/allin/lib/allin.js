var jsdom = require('jsdom');
var path = require('path');
var fs = require('fs');
var url = require('url');
var cssB64 = require('css-b64-images');
var minify = require('html-minifier').minify;
var jquery = fs.readFileSync(path.resolve(__dirname, 'jquery.min.js'), {encoding: 'utf-8'});

var _contentTypes = {
  ".png": "image/png",
  ".gif": "image/gif",
  ".jpg": "image/jpeg",
  ".jpeg": "image/jpeg",
  ".bmp": "image/bmp",
  ".webp": "image/webp"
}

var allin = function(html_path, opt, cb) {
  if(arguments.length === 2) {
    cb = opt;
    opt = null;
  }else if(arguments.length < 2){
    console.error("You should at least two arguments.")
  }
  var html = fs.readFileSync(html_path, {encoding: 'utf-8'})
  allin.dom(html, path.dirname(html_path), opt, cb);
}


allin.html = function(html, dir, opt, cb) {
  
  if(arguments.length === 3) {
    cb = opt;
    opt = null;
  }else if(arguments.length < 3){
    console.error("You should at least three arguments.")
  }
  return allin.dom(html, dir, opt, cb);
}


allin.dom = function(html, dir, opt, cb) {
  var _allin = allin;
  var deferredArr = [];

  jsdom.env({
    html: html,
    src: [jquery],
    done: function (errors, window) {
      var $ = window.$;

      // javascript
      $('script[type="text/javascript"]').each(function() {
        var deferred = new $.Deferred();
        var src = $(this).attr('src');
        if(src !== undefined) {
          // have attribute
          var scripts= allin.fetch(src, dir)
          var replace_html = allin.replace('<script type="text/javascript">' + scripts + '</script>', $(this));
          deferred.resolve();
        }else {
          deferred.resolve();
        }
        deferredArr.push(deferred);
      })

      // allin css styles, convert urls to base64
      $.each($('style'), function() {
        var deferred = new $.Deferred();
        var css = $(this).html();
        var _this = $(this)

        cssB64.fromString(css, dir, dir, function(err, css) {
          if(err) {
            console.error(err);
          }else {
            _allin.replace('<style type="text/css">' + css + '</style>', _this);
            deferred.resolve();
          }
        })
        deferredArr.push(deferred);
      })

      // css
      $.each($('link[type="text/css"]'), function() {
        var deferred = new $.Deferred();
        var href = $(this).attr('href');
        var _this = $(this)
        if (allin._isLocal(href)) {
          if(href !== undefined) {
            // have attribute
            var style = allin.fetch(href, dir)
            cssB64.fromString(style, path.resolve(path.dirname(path.join(dir, href))), path.resolve(dir), function(err, css) {
              if(err) {
                console.error(err);
              }else{
                _allin.replace('<style type="text/css">' + css + '</style>', _this);
                deferred.resolve();
              }
            })

          }else {
            deferred.resolve();
          }
        }else {
          deferred.resolve();
        }
        deferredArr.push(deferred);
      })

      // image
      $('img').each(function() {
        var src = $(this).attr('src');
        var deferred = new $.Deferred();

        if (src && allin._isLocal(src)) {
          var file = path.join(dir, src)
          var img = fs.readFileSync(file)
          var contentType = _contentTypes[path.extname(file)] || 'image/png'
          var dataUri = "data:" + contentType + ";base64," + img.toString("base64")
          
          $(this).attr('src', dataUri)
          deferred.resolve();
        }else {
          deferred.resolve();
        }
        deferredArr.push(deferred);
      })

      $.when.apply($, deferredArr).then(function() {
        $('.jsdom').remove();
        cb(allin.getPageHtml($, opt))
      });
    }
  });
}

allin.fetch = function(route, dirname) {
  var ab_route = path.join(dirname, route)
  var script= fs.readFileSync(ab_route, {encoding: 'utf-8'})
  return script;
}


allin.replace = function(html, tag) {
  return tag.replaceWith(html)
}

allin.getPageHtml = function($, opt) {
  var html = $("html").html();
  var result = minify(html, opt);
  return "<html>" + result + "</html>";
}

allin._isLocal = function(href) {
  return href && !url.parse(href).hostname;
}

module.exports = allin;
