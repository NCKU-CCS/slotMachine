#!/usr/bin/env node

var _ = require('lodash');
var prog = require('commander');
var fileSave = require('file-save');
var allin_html = require('allin');
var path = require('path');
var stage = require('node-stage');
var Q = require('q');
var FS = require("q-io/fs");
var chalk = require('chalk');
var util = require('util');

var pkg = require('../package.json');
var core = require('../index')
var build = core.build;
var init = core.init;
var watch = core.watch;
var create = core.create;

var printErr = function(err) {
  console.log(chalk.red(err));
  console.log(err.stack);
}


var arg = process.argv;

// General options
prog
  .version(pkg.version)

// get a generator
// prog
//  .command('get [generator]')
//  .description('Get a can (generator)!')
//  .action(function(generator) {
//    if(generator)
//      return get(generator)
//    console.log('$ canner get [generator], generator have to have an value, ex: sample, ...')
//    process.exit(1);
//  });


// initialize the project
prog
  .command('init [source_dir]')
  .description('initialize files and folders, under a directory.')
  .usage('[options] <directory>')
  .option('-g, --generator <generator>', 'Inital generate the generator that you are finding.')
  .action(function(dir, options) {
    init(dir, options.generator).catch(function(err) {
      stage.error(err);
    })
  });

// building docs from canner
prog
  .command('build [canner.json]')
  .description('build a canner from a canner.json')
  .usage('[options] <source to canner.json, default ./canner.json>')
  .option('-o, --output <directory>', 'Path to output directory, defaults to current directory')
  .option('-s, --serve <directory>', 'Path you want to start a local server. Default port 4000 for specific port use option -p')
  .option('-e, --engine <template engine>', 'Choose a template engine. Default engine "handlebars"')
  .option('-p, --port <port number>', 'Port which your local server start.')
  .option('-m, --minify', 'Minify the result')
  .action(function(dir, options) {
    build(dir, options)
      .catch(function(err) {
        stage.error(err);
      });
  });

// watching docs from canner
prog
  .command('watch [canner.json]')
  .description('watching any changes in a canner and recompiled')
  .usage('[options] <source to canner.json, default ./canner.json>')
  .option('-o, --output <directory>', 'Path to output directory, defaults to current directory')
  .option('-s, --serve <directory>', 'Path you want to start a local server. Default port 4000 for specific port use option -p')
  .option('-e, --engine <template engine>', 'Choose a template engine. Default engine "handlebars"')
  .option('-p, --port <port number>', 'Port which your local server start.')
  .option('-m, --minify', 'Minify the result')
  .action(function(dir, options) {
    watch(dir, options)
      .catch(function(err) {
        stage.error(err);
      })
  });

// make html include files all warp allin
prog
  .command('allin [htmlfile]')
  .description('make html include files all warp allin')
  .usage('[options] <source to your html, default ./index.html>')
  .option('-m, --minifyall', 'Minify css, html, js, images.')
  .option('-o, --output <directory>', 'Path to output directory, defaults to current directory')
  .option('-n, --filename <filename>', 'Output html file name, default to output.html')
  .action(function(htmlfile) {

    var opt = {
      "minifyCSS": true,
      "minifyJS": true,
      "removeComments": true,
      "collapseWhitespace": true
    };

    var filename = prog.args[1].filename ? prog.args[1].filename : 'output.html';
    var output = prog.args[1].output ? prog.args[1].output : './';
    var minify = prog.args[1].minifyall ? prog.args[1].minifyall : null;

    if (!minify) {
      opt = null;
    }

    allin_html(path.resolve(process.cwd(), htmlfile), opt, function(all) {
      fileSave(path.resolve(path.join(process.cwd(), output, filename)))
        .write(all);
    });
  });

prog
  .command('create [hbs_template]')
  .description('create a canner.json from a hbs template')
  .usage('<hbs_template, default value: "index.hbs">')
  .option('-o, --output <directory>', 'Path to output directory, defaults to current directory')
  .option('-p, --print', 'print data')
  .option('-e, --extend <canner_json>', 'extend a existing canner.json from a new hbs template')
  .action(function(hbs, options) {
    var hbsFile = hbs ? hbs : './index.hbs';
    var hbsPath = path.resolve(process.cwd(), hbsFile);
    var dir = options.output ? path.resolve(process.cwd(), options.output) : './';
    options.outputPath = path.join(dir, './canner.json');

    create(hbsPath, options);
  });

// if empty
if (_.isEmpty(prog.parse(process.argv).args) && process.argv.length === 2) {
  prog.help();
}
